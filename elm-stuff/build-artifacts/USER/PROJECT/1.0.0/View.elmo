Elm.View = Elm.View || {};
Elm.View.make = function (_elm) {
   "use strict";
   _elm.View = _elm.View || {};
   if (_elm.View.values)
   return _elm.View.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "View",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Shorthand = Elm.Html.Shorthand.make(_elm),
   $List = Elm.List.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var $new = $Html$Shorthand.div_(_L.fromArray([A2($Html.label,
   _L.fromArray([]),
   _L.fromArray([$Html.text("Name")]))]));
   var view = F2(function (students,
   address) {
      return function () {
         var title = $Html$Shorthand.tr_(_L.fromArray([$Html$Shorthand.th_(_L.fromArray([$Html.text("Name")]))
                                                      ,$Html$Shorthand.th_(_L.fromArray([$Html.text("Grade")]))
                                                      ,$Html$Shorthand.th_(_L.fromArray([$Html.text("Tools")]))]));
         var row = function (student) {
            return $Html$Shorthand.tr_(_L.fromArray([$Html$Shorthand.th_(_L.fromArray([$Html.text(student.name)]))
                                                    ,$Html$Shorthand.th_(_L.fromArray([$Html.text($Basics.toString(student.score))]))
                                                    ,$Html$Shorthand.th_(_L.fromArray([A2($Html.button,
                                                    _L.fromArray([$Html$Attributes.$class("ui button")
                                                                 ,A2($Html$Events.onClick,
                                                                 address,
                                                                 $Model.Delete(student))]),
                                                    _L.fromArray([$Html.text("Delete")]))]))]));
         };
         return A2($Html.table,
         _L.fromArray([$Html$Attributes.$class("ui celled table")]),
         _L.fromArray([$Html$Shorthand.thead_(_L.fromArray([title]))
                      ,$Html$Shorthand.tbody_(A2($List.map,
                      row,
                      students))]));
      }();
   });
   var layers = F2(function (students,
   address) {
      return _L.fromArray([A2(view,
      students,
      address)]);
   });
   var linkCSS = function (url) {
      return A3($Html.node,
      "link",
      _L.fromArray([$Html$Attributes.href(url)
                   ,$Html$Attributes.rel("stylesheet")]),
      _L.fromArray([]));
   };
   var semantic$ui = function () {
      var semantic = function (s) {
         return linkCSS(A2($Basics._op["++"],
         "https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.0.0/components/",
         A2($Basics._op["++"],
         s,
         ".css")));
      };
      return _L.fromArray([semantic("table")
                          ,semantic("button")
                          ,semantic("input")]);
   }();
   _elm.View.values = {_op: _op
                      ,linkCSS: linkCSS
                      ,semantic$ui: semantic$ui
                      ,view: view
                      ,$new: $new
                      ,layers: layers};
   return _elm.View.values;
};